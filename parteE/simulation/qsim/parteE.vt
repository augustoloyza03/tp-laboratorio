// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 16:04:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    circuiteria
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuiteria_vlg_sample_tst(
	clk,
	Hab_Dat,
	Hab_Dir,
	reset,
	SCL,
	SDA,
	sampler_tx
);
input  clk;
input  Hab_Dat;
input  Hab_Dir;
input  reset;
input  SCL;
input  SDA;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Hab_Dat or Hab_Dir or reset or SCL or SDA)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module circuiteria_vlg_check_tst (
	finDATO,
	finDIR,
	soy,
	sampler_rx
);
input  finDATO;
input  finDIR;
input  soy;
input sampler_rx;

reg  finDATO_expected;
reg  finDIR_expected;
reg  soy_expected;

reg  finDATO_prev;
reg  finDIR_prev;
reg  soy_prev;

reg  finDATO_expected_prev;
reg  finDIR_expected_prev;
reg  soy_expected_prev;

reg  last_finDATO_exp;
reg  last_finDIR_exp;
reg  last_soy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	finDATO_prev = finDATO;
	finDIR_prev = finDIR;
	soy_prev = soy;
end

// update expected /o prevs

always @(trigger)
begin
	finDATO_expected_prev = finDATO_expected;
	finDIR_expected_prev = finDIR_expected;
	soy_expected_prev = soy_expected;
end



// expected soy
initial
begin
	soy_expected = 1'bX;
end 

// expected finDIR
initial
begin
	finDIR_expected = 1'bX;
end 

// expected finDATO
initial
begin
	finDATO_expected = 1'bX;
end 
// generate trigger
always @(finDATO_expected or finDATO or finDIR_expected or finDIR or soy_expected or soy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finDATO = %b | expected finDIR = %b | expected soy = %b | ",finDATO_expected_prev,finDIR_expected_prev,soy_expected_prev);
	$display("| real finDATO = %b | real finDIR = %b | real soy = %b | ",finDATO_prev,finDIR_prev,soy_prev);
`endif
	if (
		( finDATO_expected_prev !== 1'bx ) && ( finDATO_prev !== finDATO_expected_prev )
		&& ((finDATO_expected_prev !== last_finDATO_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finDATO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finDATO_expected_prev);
		$display ("     Real value = %b", finDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finDATO_exp = finDATO_expected_prev;
	end
	if (
		( finDIR_expected_prev !== 1'bx ) && ( finDIR_prev !== finDIR_expected_prev )
		&& ((finDIR_expected_prev !== last_finDIR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finDIR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finDIR_expected_prev);
		$display ("     Real value = %b", finDIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_finDIR_exp = finDIR_expected_prev;
	end
	if (
		( soy_expected_prev !== 1'bx ) && ( soy_prev !== soy_expected_prev )
		&& ((soy_expected_prev !== last_soy_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port soy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", soy_expected_prev);
		$display ("     Real value = %b", soy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_soy_exp = soy_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module circuiteria_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Hab_Dat;
reg Hab_Dir;
reg reset;
reg SCL;
reg SDA;
// wires                                               
wire finDATO;
wire finDIR;
wire soy;

wire sampler;                             

// assign statements (if any)                          
circuiteria i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.finDATO(finDATO),
	.finDIR(finDIR),
	.Hab_Dat(Hab_Dat),
	.Hab_Dir(Hab_Dir),
	.reset(reset),
	.SCL(SCL),
	.SDA(SDA),
	.soy(soy)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// Hab_Dat
initial
begin
	Hab_Dat = 1'b0;
end 

// Hab_Dir
initial
begin
	Hab_Dir = 1'b1;
	Hab_Dir = #400000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// SCL
always
begin
	SCL = 1'b0;
	SCL = #25000 1'b1;
	#25000;
end 

// SDA
initial
begin
	SDA = 1'b1;
	SDA = #400000 1'b0;
end 

circuiteria_vlg_sample_tst tb_sample (
	.clk(clk),
	.Hab_Dat(Hab_Dat),
	.Hab_Dir(Hab_Dir),
	.reset(reset),
	.SCL(SCL),
	.SDA(SDA),
	.sampler_tx(sampler)
);

circuiteria_vlg_check_tst tb_out(
	.finDATO(finDATO),
	.finDIR(finDIR),
	.soy(soy),
	.sampler_rx(sampler)
);
endmodule

