// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/04/2024 17:32:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	b0,
	b1,
	b2,
	b3,
	Bin,
	CLK,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  b0;
input  b1;
input  b2;
input  b3;
input  Bin;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or b0 or b1 or b2 or b3 or Bin or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block1_vlg_check_tst (
	Bout,
	Z0,
	Z1,
	Z2,
	Z3,
	sampler_rx
);
input  Bout;
input  Z0;
input  Z1;
input  Z2;
input  Z3;
input sampler_rx;

reg  Bout_expected;
reg  Z0_expected;
reg  Z1_expected;
reg  Z2_expected;
reg  Z3_expected;

reg  Bout_prev;
reg  Z0_prev;
reg  Z1_prev;
reg  Z2_prev;
reg  Z3_prev;

reg  Bout_expected_prev;
reg  Z0_expected_prev;
reg  Z1_expected_prev;
reg  Z2_expected_prev;
reg  Z3_expected_prev;

reg  last_Bout_exp;
reg  last_Z0_exp;
reg  last_Z1_exp;
reg  last_Z2_exp;
reg  last_Z3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Bout_prev = Bout;
	Z0_prev = Z0;
	Z1_prev = Z1;
	Z2_prev = Z2;
	Z3_prev = Z3;
end

// update expected /o prevs

always @(trigger)
begin
	Bout_expected_prev = Bout_expected;
	Z0_expected_prev = Z0_expected;
	Z1_expected_prev = Z1_expected;
	Z2_expected_prev = Z2_expected;
	Z3_expected_prev = Z3_expected;
end



// expected Z0
initial
begin
	Z0_expected = 1'bX;
end 

// expected Z1
initial
begin
	Z1_expected = 1'bX;
end 

// expected Z2
initial
begin
	Z2_expected = 1'bX;
end 

// expected Z3
initial
begin
	Z3_expected = 1'bX;
end 

// expected Bout
initial
begin
	Bout_expected = 1'bX;
end 
// generate trigger
always @(Bout_expected or Bout or Z0_expected or Z0 or Z1_expected or Z1 or Z2_expected or Z2 or Z3_expected or Z3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Bout = %b | expected Z0 = %b | expected Z1 = %b | expected Z2 = %b | expected Z3 = %b | ",Bout_expected_prev,Z0_expected_prev,Z1_expected_prev,Z2_expected_prev,Z3_expected_prev);
	$display("| real Bout = %b | real Z0 = %b | real Z1 = %b | real Z2 = %b | real Z3 = %b | ",Bout_prev,Z0_prev,Z1_prev,Z2_prev,Z3_prev);
`endif
	if (
		( Bout_expected_prev !== 1'bx ) && ( Bout_prev !== Bout_expected_prev )
		&& ((Bout_expected_prev !== last_Bout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp = Bout_expected_prev;
	end
	if (
		( Z0_expected_prev !== 1'bx ) && ( Z0_prev !== Z0_expected_prev )
		&& ((Z0_expected_prev !== last_Z0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z0_expected_prev);
		$display ("     Real value = %b", Z0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z0_exp = Z0_expected_prev;
	end
	if (
		( Z1_expected_prev !== 1'bx ) && ( Z1_prev !== Z1_expected_prev )
		&& ((Z1_expected_prev !== last_Z1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z1_expected_prev);
		$display ("     Real value = %b", Z1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z1_exp = Z1_expected_prev;
	end
	if (
		( Z2_expected_prev !== 1'bx ) && ( Z2_prev !== Z2_expected_prev )
		&& ((Z2_expected_prev !== last_Z2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z2_expected_prev);
		$display ("     Real value = %b", Z2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z2_exp = Z2_expected_prev;
	end
	if (
		( Z3_expected_prev !== 1'bx ) && ( Z3_prev !== Z3_expected_prev )
		&& ((Z3_expected_prev !== last_Z3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z3_expected_prev);
		$display ("     Real value = %b", Z3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Z3_exp = Z3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
reg Bin;
reg CLK;
// wires                                               
wire Bout;
wire Z0;
wire Z1;
wire Z2;
wire Z3;

wire sampler;                             

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.Bin(Bin),
	.Bout(Bout),
	.CLK(CLK),
	.Z0(Z0),
	.Z1(Z1),
	.Z2(Z2),
	.Z3(Z3)
);

// a0
initial
begin
	a0 = 1'b0;
	a0 = #310000 1'b1;
	a0 = #480000 1'b0;
end 

// a1
initial
begin
	a1 = 1'b0;
	a1 = #310000 1'b1;
	a1 = #480000 1'b0;
end 

// a2
initial
begin
	a2 = 1'b0;
	a2 = #310000 1'b1;
	a2 = #480000 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
	a3 = #310000 1'b1;
	a3 = #490000 1'b0;
end 

// b0
initial
begin
	b0 = 1'b0;
	b0 = #310000 1'b1;
	b0 = #490000 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
	b1 = #310000 1'b1;
	b1 = #490000 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #310000 1'b1;
	b2 = #490000 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #310000 1'b1;
	b3 = #490000 1'b0;
end 

// Bin
initial
begin
	Bin = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

Block1_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.Bin(Bin),
	.CLK(CLK),
	.sampler_tx(sampler)
);

Block1_vlg_check_tst tb_out(
	.Bout(Bout),
	.Z0(Z0),
	.Z1(Z1),
	.Z2(Z2),
	.Z3(Z3),
	.sampler_rx(sampler)
);
endmodule

